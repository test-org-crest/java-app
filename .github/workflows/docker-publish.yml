name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '41 3 * * *'
  push:
    branches: [ "rest-api" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  INTEGRATION_ID: 4717


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Preparing Payload to push artifacts
        id: payload
        env:
          registry: ${{ env.REGISTRY }}
          image_name: ${{ env.IMAGE_NAME }}
          tag: ${{ steps.meta.outputs.tags }}
          job_run_number: ${{ github.run_number }}
          job_name: ${{ github.workflow }}
          repository: ${{ github.repository }}
          digest: ${{ steps.build-and-push.outputs.digest }}
          type: "type1"
          artifact_creation_time: "2023-08-08T10:09:44.000+00:00"
        run: |
          echo "registry=${{ env.registry }}" >> "$GITHUB_OUTPUT"
          echo "image_name=${{ env.image_name }}" >> "$GITHUB_OUTPUT"
          echo "tag=${{ env.tag }}" >> "$GITHUB_OUTPUT"
          echo "job_run_number=${{ env.job_run_number }}" >> "$GITHUB_OUTPUT"
          echo "job_name=${{ env.job_name }}" >> "$GITHUB_OUTPUT"
          echo "repository=${{ env.repository }}" >> "$GITHUB_OUTPUT"
          echo "digest=${{ env.digest }}" >> "$GITHUB_OUTPUT"
          echo "type=${{ env.type }}" >> "$GITHUB_OUTPUT"
          echo "artifact_creation_time=${{ env.artifact_creation_time }}" >> "$GITHUB_OUTPUT"

      - name: Push artifacts to SEI Endpoint
        id: push_artifacts
        env:
          payload: '{"integration_id":"${{ env.INTEGRATION_ID }}","repository":"${{ steps.payload.outputs.repository }}","job_run_number":"${{ steps.payload.outputs.job_run_number }}","job_name":"${{ steps.payload.outputs.job_name }}","artifacts":[{"name":"${{ steps.payload.outputs.image_name }}","location":"${{ steps.payload.outputs.registry }}/${{ steps.payload.outputs.image_name }}","tag":"${{ steps.payload.outputs.tag }}","digest":"${{steps.payload.outputs.digest}}","type":"${{steps.payload.outputs.type}}","artifact_created_at":"${{steps.payload.outputs.artifact_creation_time}}"}]}'
        run: curl 'https://testapi1.propelo.ai/v1/cicd/push_artifacts' -H 'accept:application/json' -H 'authorization:Apikey ${{ secrets.SEI_API_KEY }}' -H 'content-type:application/json' --data-raw '${{ env.payload }}' --compressed --globoff

      - name: Preparing Payload to push Params
        id: payload_params
        env:
          name: ${{ steps.meta.outputs.labels }}
          type: ${{ steps.meta.outputs.labels }}
          value: ${{ steps.meta.outputs.labels }}
          job_run_number: ${{ github.run_number }}
          job_name: ${{ github.workflow }}
          repository: ${{ github.repository }}
        run: |
          echo "name=${{ env.name }}" >> "$GITHUB_OUTPUT"
          echo "type=${{ env.type }}" >> "$GITHUB_OUTPUT"
          echo "value=${{ env.value }}" >> "$GITHUB_OUTPUT"
          echo "job_run_number=${{ env.job_run_number }}" >> "$GITHUB_OUTPUT"
          echo "job_name=${{ env.job_name }}" >> "$GITHUB_OUTPUT"
          echo "repository=${{ env.repository }}" >> "$GITHUB_OUTPUT"

      - name: Push params to SEI Endpoint
        id: push_params
        env:
          payload: '{"integration_id":"${{ env.INTEGRATION_ID }}","repository":"${{ steps.payload_params.outputs.repository }}","job_run_number":"${{ steps.payload_params.outputs.job_run_number }}","job_name":"${{ steps.payload_params.outputs.job_name }}","params":[{"name":"${{ steps.payload_params.outputs.name }}","type":"${{steps.payload_params.outputs.type}}","value":"${{steps.payload_params.outputs.value}}"}]}'
        run: curl 'https://testapi1.propelo.ai/v1/cicd/push_job_run_params' -H 'accept:application/json' -H 'authorization:Apikey ${{ secrets.SEI_API_KEY }}' -H 'content-type:application/json' --data-raw '${{ env.payload }}' --compressed --globoff
